{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Electronic Circuit Simulator","text":"<p> Welcome to the documentation for the Electronic Circuit Simulator, a simple SFML-based project that visualizes the behavior of basic electronic and physics concepts such as resistance, current, and power using real-time rendering.</p>"},{"location":"#setting-up-the-project-visual-studio-sfml","title":"\u2699\ufe0f Setting Up the Project (Visual Studio + SFML)","text":"<p>Follow these steps to build and run the simulator on Windows:</p> <ol> <li>Install Visual Studio 2022 (with C++ Desktop Development tools).  </li> <li>Download and install SFML 2.6+.  </li> <li>In your Visual Studio project:</li> <li>Add SFML include and library paths (<code>Include</code> and <code>Lib</code> folders).</li> <li>Link the required SFML libraries: <code>sfml-graphics</code>, <code>sfml-window</code>, <code>sfml-system</code>.</li> <li>Copy the SFML <code>bin</code> DLLs to your project\u2019s executable directory.</li> <li>Build and run the project.</li> </ol> <p>For a visual setup guide, watch this tutorial:  </p> <p></p>"},{"location":"#what-is-sfml","title":"\ud83d\udca1 What is SFML?","text":"<p>SFML (Simple and Fast Multimedia Library) is a C++ library for graphics, audio, and input handling. It allows developers to easily create 2D visualizations, games, and interactive tools.</p> <p>This project uses SFML to render electronic circuit diagrams and visualize the current and voltage distribution dynamically.</p> <p></p>"},{"location":"#project-idea-and-code-overview","title":"\ud83e\udde9 Project Idea and Code Overview","text":"<p>The project demonstrates how basic electrical circuits \u2014 especially series-parallel resistor networks \u2014 can be visualized dynamically using C++ and SFML.</p>"},{"location":"#core-functionality","title":"Core Functionality","text":"<ul> <li>The user enters resistor values and configuration (series and parallel).</li> <li>The program calculates:</li> <li>Equivalent resistance  </li> <li>Total current and voltage  </li> <li>Individual resistor current, voltage drop, and power</li> <li>Results are displayed in both text and graphical form.</li> </ul>"},{"location":"#main-components","title":"Main Components","text":"<ul> <li>main.cpp: Handles input/output, performs calculations, and launches visualization.  </li> <li>resources.h / resources.cpp: Handle data storage, calculations, and all SFML rendering logic.</li> </ul> <p>\ud83e\udde0 The visualization window shows resistor groups as nodes and connections, with interactive data overlays.</p>"},{"location":"#demo-implementation","title":"\ud83e\uddea Demo Implementation","text":"<p>Here\u2019s a video of the running simulator:</p> <p>\ud83c\udfa5 Watch the Demo Video</p> <p>This demo shows the real-time rendering of resistor nodes and circuit data as entered by the user.</p>"},{"location":"#running-the-executable","title":"\ud83d\ude80 Running the Executable","text":"<ol> <li>Download the ZIP file (same name as repository) from the project\u2019s main directory.  </li> <li>Extract it into any folder.  </li> <li>Run the exe file:</li> </ol> <p>(Currently supports Windows only.)</p> <p>No installation or configuration needed \u2014 everything is self-contained.</p>"},{"location":"#concepts-learned-future-scope","title":"\ud83d\udcd8 Concepts Learned &amp; Future Scope","text":""},{"location":"#concepts-learned","title":"Concepts Learned","text":"<ul> <li>Working with SFML graphics and event handling  </li> <li>Structuring C++ OOP code for simulation logic  </li> <li>Implementing real-time data visualization and physics-based computation  </li> <li>Handling user input and file I/O efficiently  </li> </ul>"},{"location":"#future-scope","title":"Future Scope","text":"<ul> <li>\ud83e\uddf1 Improved and interactive UI  </li> <li>\ud83d\udc27 Cross-platform builds (Linux / macOS)  </li> <li>\u26a1 Support for more complex circuits (capacitors, inductors, voltage sources)  </li> <li>\ud83e\uddee Integration with a physics engine or symbolic solver  </li> <li>\ud83d\udcbe Option to save and load user-created circuit layouts  </li> </ul>"},{"location":"#credits","title":"\ud83e\udded Credits","text":"<p>Developed by Once-1296 Licensed under the MIT License</p> <p>This documentation site is built with MkDocs Material, featuring dark/light mode, navigation sidebar, and full-text search.</p>"}]}